import { NextResponse } from 'next/server';
import axios from 'axios';

export async function POST(request) {
  console.log("üîÑ Funkcja perplexity-treatment zosta≈Ça wywo≈Çana");
  
  try {
    // Parsowanie danych wej≈õciowych
    const reqData = await request.json();
    const { diagnosis, medicalSociety } = reqData;
    
    console.log("üìã Otrzymane dane:", { diagnosis, medicalSociety });

    // Sprawdzenie wymaganych p√≥l
    if (!diagnosis) {
      console.log("‚ùå B≈ÇƒÖd: BrakujƒÖca diagnoza");
      return NextResponse.json({ 
        error: 'BrakujƒÖce pole: diagnoza' 
      }, { status: 400 });
    }

    if (!medicalSociety) {
      console.log("‚ö†Ô∏è Ostrze≈ºenie: Brak towarzystwa medycznego");
      // Kontynuujemy przetwarzanie, ale logujemy ostrze≈ºenie
    }

    // Klucz API z zmiennych ≈õrodowiskowych
    const apiKey = process.env.PERPLEXITY_API_KEY;
    
    if (!apiKey) {
      console.log("‚ùå B≈ÇƒÖd: Brak klucza API Perplexity w zmiennych ≈õrodowiskowych");
      return NextResponse.json({ 
        error: 'B≈ÇƒÖd konfiguracji API - brak klucza Perplexity' 
      }, { status: 500 });
    }
    
    console.log("üîë Klucz API Perplexity znaleziony (pierwszych 5 znak√≥w):", apiKey.substring(0, 5) + '...');

    // Przygotowanie promptu dla Perplexity API z nowymi wymaganiami
    const prompt = `
      Jeste≈õ do≈õwiadczonym lekarzem medycznym z 20 letnim do≈õwiadczeniem. 
      Na podstawie podanej diagnozy (${diagnosis}) i rekomendacji towarzystwa medycznego (${medicalSociety || "polskiego towarzystwa medycznego w≈Ça≈õciwego dla tej choroby"}), 
      przygotuj szczeg√≥≈Çowe rekomendacje leczenia.
      
      BARDZO WA≈ªNE: Twoja odpowied≈∫ powinna byƒá dwuczƒô≈õciowa:
      1. Czƒô≈õƒá pierwsza - rekomendacje oparte na og√≥lnej wiedzy medycznej i do≈õwiadczeniu klinicznym dla tej diagnozy, bez konieczno≈õci podawania ≈∫r√≥de≈Ç.
      2. Czƒô≈õƒá druga - rekomendacje oparte na oficjalnych wytycznych ${medicalSociety || "odpowiedniego polskiego towarzystwa medycznego"} lub danych od redakcji Medycyny Praktycznej oraz ksiƒÖ≈ºek medycznych dostƒôpnych w internecie. Wszystkie zalecenia muszƒÖ byƒá poparte ≈∫r√≥d≈Çami.
      
      W ka≈ºdej czƒô≈õci uwzglƒôdnij:
      1. Farmakoterapiƒô (leki, dawkowanie, czas stosowania)
      2. Zalecenia niefarmakologiczne (dieta, rehabilitacja, styl ≈ºycia itp.)
      
      Dodatkowo, przedstaw charakterystykƒô 2-4 kluczowych lek√≥w stosowanych w leczeniu tej diagnozy (zamiast tylko jednego), w tym: nazwa, wskazania, przeciwwskazania, interakcje.
      
      Dla charakterystyki lek√≥w odwo≈Çuj siƒô WY≈ÅƒÑCZNIE do oficjalnych ≈∫r√≥de≈Ç takich jak URPL (UrzƒÖd Rejestracji Produkt√≥w Leczniczych), Ministerstwo Zdrowia, ChPL (Charakterystyka Produktu Leczniczego) lub innych oficjalnych polskich ≈∫r√≥de≈Ç rzƒÖdowych.
      
      Format odpowiedzi powinien byƒá w JSON i zawieraƒá nastƒôpujƒÖce sekcje:
      {
        "Rekomendacje_Og√≥lne": {
          "Farmakoterapia": [
            "Zalecenie 1",
            "Zalecenie 2"
          ],
          "Zalecenia_Niefarmakologiczne": [
            "Zalecenie 1",
            "Zalecenie 2"
          ]
        },
        "Rekomendacje_Oficjalne": {
          "Farmakoterapia": [
            "Zalecenie 1",
            "Zalecenie 2"
          ],
          "≈πr√≥d≈Ço_Farmakoterapii": "Pe≈Çny opis ≈∫r√≥d≈Ça z URL (np. wytyczne towarzystwa)",
          "Zalecenia_Niefarmakologiczne": [
            "Zalecenie 1",
            "Zalecenie 2"
          ],
          "≈πr√≥d≈Ço_Zalece≈Ñ_Niefarmakologicznych": "Pe≈Çny opis ≈∫r√≥d≈Ça z URL (np. wytyczne towarzystwa)"
        },
        "Charakterystyka_Lek√≥w": [
          {
            "Nazwa": "Nazwa leku 1",
            "Wskazania": ["Wskazanie 1", "Wskazanie 2"],
            "Przeciwwskazania": ["Przeciwwskazanie 1", "Przeciwwskazanie 2"],
            "Interakcje": ["Interakcja 1", "Interakcja 2"],
            "≈πr√≥d≈Ço": "Pe≈Çny opis ≈∫r√≥d≈Ça z URL (np. ChPL, URPL)"
          }
        ]
      }
      
      Kompletno≈õƒá ≈∫r√≥de≈Ç w czƒô≈õci oficjalnych rekomendacji i wiarygodno≈õƒá wszystkich rekomendacji sƒÖ kluczowe. Podaj pe≈Çne URL do ≈∫r√≥de≈Ç w czƒô≈õci oficjalnej.
    `;

    console.log("üì§ Wysy≈Çanie zapytania do Perplexity API...");
    
    // Konfiguracja zapytania do API Perplexity
    const perplexityResponse = await axios.post(
      'https://api.perplexity.ai/chat/completions',
      {
        model: "llama-3-sonar-small-32k-online", // model z dostƒôpem do internetu
        messages: [
          { role: "system", content: "Jeste≈õ do≈õwiadczonym lekarzem, kt√≥ry udziela rekomendacji leczenia w oparciu o najnowsze wytyczne medyczne. Zawsze podajesz ≈∫r√≥d≈Ça swoich rekomendacji." },
          { role: "user", content: prompt }
        ],
        temperature: 0.1, // niska temperatura dla bardziej precyzyjnych, faktycznych odpowiedzi
        max_tokens: 2000,
        search_enable: true // w≈ÇƒÖczenie wyszukiwania w internecie
      },
      {
        headers: {
          'Authorization': `Bearer ${apiKey}`,
          'Content-Type': 'application/json'
        }
      }
    );
    
    console.log("‚úÖ Odpowied≈∫ od Perplexity otrzymana, status:", perplexityResponse.status);

    // Parsowanie odpowiedzi od Perplexity
    const responseContent = perplexityResponse.data.choices[0].message.content;
    console.log("üìù Surowa odpowied≈∫ od Perplexity:", responseContent);
    
    // Pr√≥ba parsowania JSON z odpowiedzi
    let parsedResponse;
    try {
      parsedResponse = JSON.parse(responseContent);
      console.log("‚úÖ Pomy≈õlnie sparsowano JSON z odpowiedzi Perplexity");
    } catch (e) {
      console.error("‚ùå B≈ÇƒÖd parsowania JSON z odpowiedzi Perplexity:", e);
      
      // Spr√≥bujmy znale≈∫ƒá JSON w odpowiedzi
      const jsonMatch = responseContent.match(/\{[\s\S]*\}/);
      
      if (jsonMatch) {
        try {
          parsedResponse = JSON.parse(jsonMatch[0]);
          console.log("‚úÖ Uda≈Ço siƒô wyekstraktowaƒá i sparsowaƒá JSON");
        } catch (extractError) {
          console.error("‚ùå Nieudana ekstrakcja JSON:", extractError);
          
          // Zwracamy b≈ÇƒÖd z oryginalnƒÖ odpowiedziƒÖ jako tekst
          return NextResponse.json({ 
            error: "Nie uda≈Ço siƒô przetworzyƒá odpowiedzi z API Perplexity. Spr√≥buj ponownie za chwilƒô.",
            rawResponse: responseContent
          }, { status: 500 });
        }
      } else {
        // Zwracamy b≈ÇƒÖd z oryginalnƒÖ odpowiedziƒÖ jako tekst
        return NextResponse.json({ 
          error: "Odpowied≈∫ API nie zawiera poprawnego formatu JSON. Spr√≥buj ponownie za chwilƒô.",
          rawResponse: responseContent
        }, { status: 500 });
      }
    }

    // Sprawdzenie i czyszczenie odpowiedzi
    const cleanedResponse = {
      Rekomendacje_Og√≥lne: {
        Farmakoterapia: Array.isArray(parsedResponse.Rekomendacje_Og√≥lne?.Farmakoterapia) 
          ? parsedResponse.Rekomendacje_Og√≥lne.Farmakoterapia 
          : parsedResponse.Rekomendacje_Og√≥lne?.Farmakoterapia 
            ? [parsedResponse.Rekomendacje_Og√≥lne.Farmakoterapia] 
            : [],
            
        Zalecenia_Niefarmakologiczne: Array.isArray(parsedResponse.Rekomendacje_Og√≥lne?.Zalecenia_Niefarmakologiczne) 
          ? parsedResponse.Rekomendacje_Og√≥lne.Zalecenia_Niefarmakologiczne 
          : parsedResponse.Rekomendacje_Og√≥lne?.Zalecenia_Niefarmakologiczne 
            ? [parsedResponse.Rekomendacje_Og√≥lne.Zalecenia_Niefarmakologiczne] 
            : []
      },
      
      Rekomendacje_Oficjalne: {
        Farmakoterapia: Array.isArray(parsedResponse.Rekomendacje_Oficjalne?.Farmakoterapia) 
          ? parsedResponse.Rekomendacje_Oficjalne.Farmakoterapia 
          : parsedResponse.Rekomendacje_Oficjalne?.Farmakoterapia 
            ? [parsedResponse.Rekomendacje_Oficjalne.Farmakoterapia] 
            : [],
            
        ≈πr√≥d≈Ço_Farmakoterapii: parsedResponse.Rekomendacje_Oficjalne?.≈πr√≥d≈Ço_Farmakoterapii || "",
        
        Zalecenia_Niefarmakologiczne: Array.isArray(parsedResponse.Rekomendacje_Oficjalne?.Zalecenia_Niefarmakologiczne) 
          ? parsedResponse.Rekomendacje_Oficjalne.Zalecenia_Niefarmakologiczne 
          : parsedResponse.Rekomendacje_Oficjalne?.Zalecenia_Niefarmakologiczne 
            ? [parsedResponse.Rekomendacje_Oficjalne.Zalecenia_Niefarmakologiczne] 
            : [],
            
        ≈πr√≥d≈Ço_Zalece≈Ñ_Niefarmakologicznych: parsedResponse.Rekomendacje_Oficjalne?.≈πr√≥d≈Ço_Zalece≈Ñ_Niefarmakologicznych || ""
      },
      
      Charakterystyka_Lek√≥w: Array.isArray(parsedResponse.Charakterystyka_Lek√≥w) 
        ? parsedResponse.Charakterystyka_Lek√≥w.map(lek => ({
            Nazwa: lek.Nazwa || "Brak danych",
            
            Wskazania: Array.isArray(lek.Wskazania) 
              ? lek.Wskazania 
              : lek.Wskazania 
                ? [lek.Wskazania] 
                : [],
                
            Przeciwwskazania: Array.isArray(lek.Przeciwwskazania) 
              ? lek.Przeciwwskazania 
              : lek.Przeciwwskazania 
                ? [lek.Przeciwwskazania] 
                : [],
                
            Interakcje: Array.isArray(lek.Interakcje) 
              ? lek.Interakcje 
              : lek.Interakcje 
                ? [lek.Interakcje] 
                : [],
                
            ≈πr√≥d≈Ço: lek.≈πr√≥d≈Ço || ""
          }))
        : parsedResponse.Charakterystyka_Lek√≥w
          ? [parsedResponse.Charakterystyka_Lek√≥w]
          : []
    };
    
    console.log("‚úÖ Odpowied≈∫ zosta≈Ça oczyszczona i ustrukturyzowana");

    // Zweryfikuj czy mamy przynajmniej podstawowe dane
    if (!cleanedResponse.Rekomendacje_Og√≥lne.Farmakoterapia.length && 
        !cleanedResponse.Rekomendacje_Og√≥lne.Zalecenia_Niefarmakologiczne.length &&
        !cleanedResponse.Rekomendacje_Oficjalne.Farmakoterapia.length && 
        !cleanedResponse.Rekomendacje_Oficjalne.Zalecenia_Niefarmakologiczne.length) {
      console.log("‚ö†Ô∏è Ostrze≈ºenie: Brak zalece≈Ñ w odpowiedzi API");
      return NextResponse.json({ 
        warning: "Otrzymano niekompletnƒÖ odpowied≈∫ z API. Brak zalece≈Ñ terapeutycznych.",
        data: cleanedResponse
      }, { status: 207 });
    }
    
    console.log("‚úÖ Zwracanie odpowiedzi");
    return NextResponse.json(cleanedResponse, { status: 200 });

  } catch (error) {
    console.error("‚ùå B≈ÇƒÖd podczas komunikacji z API:", error);
    
    let errorMessage = 'WystƒÖpi≈Ç b≈ÇƒÖd podczas przetwarzania zapytania';
    let errorDetails = {};
    
    if (error.response) {
      console.error("‚ùå Odpowied≈∫ z b≈Çƒôdem od API:", {
        status: error.response.status,
        data: error.response.data
      });
      
      errorMessage = `B≈ÇƒÖd API: ${error.response.status} - ${error.response.data.error?.message || JSON.stringify(error.response.data)}`;
      errorDetails = {
        status: error.response.status,
        message: error.response.data.error?.message,
        type: error.response.data.error?.type
      };
    } else if (error.request) {
      console.error("‚ùå Brak odpowiedzi od serwera API");
      errorMessage = 'Brak odpowiedzi od serwera API';
    } else {
      console.error("‚ùå Nieoczekiwany b≈ÇƒÖd:", error.message);
      errorDetails = { message: error.message };
    }
    
    return NextResponse.json({ 
      error: errorMessage,
      details: errorDetails
    }, { status: 500 });
  }
}Interakcje": ["Interakcja 1", "Interakcja 2"],
            "≈πr√≥d≈Ço": "Pe≈Çny opis ≈∫r√≥d≈Ça z URL (np. ChPL, URPL)"
          },
          {
            "Nazwa": "Nazwa leku 2",
            "Wskazania": ["Wskazanie 1", "Wskazanie 2"],
            "Przeciwwskazania": ["Przeciwwskazanie 1", "Przeciwwskazanie 2"],
            "
